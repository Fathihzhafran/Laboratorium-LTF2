#define BAUD 500000  // Kecepatan komunikasi Serial

// Definisi pin pada kit ESCOPE ESP32
#define AO0 26 
#define AO1 25 

#define DO0 12 
#define DO1 14 
#define DO2 27 
#define DO3 13 

#define AI0 36 
#define AI1 39 

#define DI0 34 
#define DI1 35
#define DI2 32 
#define DI3 17 

#define LED0 16 // LED pertama
#define LED1 4  // LED kedua
#define LED2 15 // LED ketiga

#define BT0 33  // Tombol input

// Konstanta jumlah LED
#define N_LED 3 

// Array untuk menyimpan pin LED
int pin_led[N_LED] = {LED0, LED1, LED2}; // Pin untuk LED

// Array untuk menyimpan status LED (1: menyala, 0: mati)
bool d_led[N_LED] = {1, 0, 0}; 

// Variabel untuk menyimpan status tombol
bool bt0;       

// Fungsi untuk menggeser nyala LED ke kiri
void rotateLeft() { 
  bool temp = d_led[0]; // Simpan nilai LED pertama
  for (int i = 1; i < N_LED; i++) { 
    d_led[i - 1] = d_led[i]; // Geser nilai LED ke kiri
  } 
  d_led[N_LED - 1] = temp; // Masukkan nilai awal ke LED terakhir
} 

// Fungsi untuk menggeser nyala LED ke kanan
void rotateRight() { 
  bool temp = d_led[N_LED - 1]; // Simpan nilai LED terakhir
  for (int i = N_LED - 1; i > 0; i--) { 
    d_led[i] = d_led[i - 1]; // Geser nilai LED ke kanan
  } 
  d_led[0] = temp; // Masukkan nilai awal ke LED pertama
} 

// Fungsi untuk mengirim data ke Serial Plotter
void plotData() { 
  // Mengirim 5 titik data untuk setiap iterasi agar lebih stabil di plot
  for (int i = 0; i < 5; i++) { 
    Serial.printf("%d %d %d %d\n",  
      bt0, // Status tombol
      d_led[0] + 2, // Data LED 0 dengan offset 2
      d_led[1] + 4, // Data LED 1 dengan offset 4
      d_led[2] + 6  // Data LED 2 dengan offset 6
    ); 
  } 
} 

// Setup untuk inisialisasi awal
void setup() { 
  Serial.begin(BAUD); // Inisialisasi komunikasi Serial
  Serial.println("\nRunning LED"); 
   
  // Konfigurasi mode pin LED sebagai output
  for (int i = 0; i < N_LED; i++) { 
    pinMode(pin_led[i], OUTPUT); 
  } 
  pinMode(BT0, INPUT); // Konfigurasi tombol sebagai input

  // Menampilkan header untuk data plot di Serial Monitor
  Serial.println("d0 d1 d2 bt0"); 
} 

// Loop utama program
void loop() { 
  bt0 = digitalRead(BT0); // Membaca status tombol
 
  // Jika tombol ditekan, geser LED ke kanan, jika tidak geser ke kiri
  if (bt0) { 
    rotateRight();     
  } 
  else { 
    rotateLeft(); 
  }   
 
  // Menulis status LED ke output sesuai dengan array d_led
  for (int i = 0; i < N_LED; i++) { 
    digitalWrite(pin_led[i], d_led[i]); 
  } 

  // Mengirim data ke Serial Plotter
  plotData(); 

  // Delay 200 ms sebelum iterasi berikutnya
  delay(200); 
}
